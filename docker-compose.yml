version: "3.8"

services:
  redis:
    image: redis:6-alpine
    container_name: redis_users
    ports:
      - "6379:6379"
    restart: always
    networks:
      - containers_network

  postgis_users:
    image: kartoza/postgis:13.0
    container_name: postgis_users_container
    expose:
      - "5433"
    ports:
      - "5433:5432"
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=users_db
      - POSTGRES_HOST=5433
    command: -p 5433
    volumes:
      - ./users_pgdata:/var/lib/postgresql/data
    networks:
      - containers_network

  postgis_hotels:
    image: kartoza/postgis:13.0
    container_name: postgis_hotels_container
    expose:
      - "5435"
    ports:
      - "5435:5432"
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=hotels_db
      - POSTGRES_HOST=5435
    command: -p 5435
    volumes:
      - ./hotels_pgdata:/var/lib/postgresql/data
    networks:
      - containers_network

  postgis_comments:
    image: kartoza/postgis:13.0
    container_name: postgis_comments_container
    expose:
      - "5436"
    ports:
      - "5436:5432"
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=comments_db
      - POSTGRES_HOST=5436
    command: -p 5436
    volumes:
      - ./comments_pgdata:/var/lib/postgresql/data
    networks:
      - containers_network

  postgis_images:
    image: kartoza/postgis:13.0
    container_name: postgis_images_container
    expose:
      - "5434"
    ports:
      - "5434:5432"
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=images_db
    volumes:
      - ./images_pgdata:/var/lib/postgresql/data
    networks:
      - containers_network

  prometheus:
    container_name: prometheus_container
    image: prom/prometheus
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:Z
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention=20d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - '9090:9090'
    networks:
      - containers_network

  node_exporter:
    container_name: node_exporter_container
    image: prom/node-exporter
    ports:
      - '9101:9100'
    networks:
      - containers_network

  grafana:
    container_name: grafana_container
    image: grafana/grafana
    ports:
      - '3000:3000'
    networks:
      - containers_network

  jaeger:
    container_name: jaeger_container
    image: jaegertracing/all-in-one:1.21
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    ports:
      - 5775:5775/udp
      - 6831:6831/udp
      - 6832:6832/udp
      - 5778:5778
      - 16686:16686
      - 14268:14268
      - 14250:14250
      - 9411:9411

  rabbitmq:
    image: 'rabbitmq:3.8-management-alpine'
    ports:
      # The standard AMQP protocol port
      - '5672:5672'
      # HTTP management UI
      - '15672:15672'

  minio:
    image: minio/minio:latest
    ports:
      - '9000:9000'
    container_name: minio_aws_container
    environment:
      MINIO_ACCESS_KEY: minio123
      MINIO_SECRET_KEY: minio123
    command: server /data
    networks:
      - containers_network

  mc:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host rm local;
      /usr/bin/mc config host add --quiet --api s3v4 local http://myminio:9000 minio123 minio123;
      /usr/bin/mc rb --force local/images/;
      /usr/bin/mc mb --quiet local/images/;
      /usr/bin/mc policy set public local/images;
      "
    networks:
      - containers_network

  users_microservice:
    container_name: users_microservice
    build:
      context: .
      dockerfile: cmd/users/Dockerfile
    ports:
      - "5001:5001"
      - "7071:7071"
    environment:
      - PORT=5001
      - CONFIG=docker
      - CFG_PATH=cmd/users/config/config-docker.yml
    depends_on:
      - redis
      - prometheus
      - node_exporter
      - grafana
    restart: always
    volumes:
      - ./users:/app
    networks:
      - containers_network

  sessions_microservice:
    container_name: sessions_microservice
    build:
      context: app/sessions
      dockerfile: cmd/sessions/Dockerfile
    ports:
      - "5000:5000"
      - "7070:7070"
    environment:
      - PORT=5000
      - CONFIG=docker
      - CFG_PATH=cmd/sessions/config/config-docker.yml
    depends_on:
      - redis
      - prometheus
      - node_exporter
      - grafana
    restart: always
    volumes:
      - ./sessions:/app
    networks:
      - containers_network

  images_microservice:
    container_name: images_microservice
    build:
      context: app/images
      dockerfile: cmd/images/Dockerfile
    ports:
      - "5002:5002"
      - "7072:7072"
    environment:
      - PORT=5002
      - CONFIG=docker
      - CFG_PATH=cmd/images/config/config-docker.yml
    depends_on:
      - redis
      - prometheus
      - node_exporter
      - grafana
    restart: always
    volumes:
      - ./images:/app
    networks:
      - containers_network

  hotels_microservice:
    container_name: hotels_microservice
    build:
      context: app/hotels
      dockerfile: cmd/hotels/Dockerfile
    ports:
      - "5003:5003"
      - "7073:7073"
    environment:
      - PORT=5003
      - CONFIG=docker
      - CFG_PATH=cmd/hotels/config/config-docker.yml
    depends_on:
      - redis
      - prometheus
      - node_exporter
      - grafana
    restart: always
    volumes:
      - ./hotels:/app
    networks:
      - containers_network

  comments_microservice:
    container_name: comments_microservice
    build:
      context: app/comments
      dockerfile: cmd/comments/Dockerfile
    ports:
      - "5004:5004"
      - "7074:7074"
    environment:
      - PORT=5004
      - CONFIG=docker
      - CFG_PATH=cmd/comments/config/config-docker.yml
    depends_on:
      - redis
      - prometheus
      - node_exporter
      - grafana
    restart: always
    volumes:
      - ./comments:/app
    networks:
      - containers_network

  api_gateway:
    container_name: api_gateway
    build:
      context: app/gateway
      dockerfile: cmd/gateway/Dockerfile
    ports:
      - "5005:5005"
      - "7075:7075"
    environment:
      - PORT=5004
      - CONFIG=docker
      - CFG_PATH=cmd/gateway/config/config-docker.yml
    depends_on:
      - redis
      - prometheus
      - node_exporter
      - grafana
    restart: always
    volumes:
      - ./gateway:/app
    networks:
      - containers_network

networks:
  containers_network:
    driver: bridge
